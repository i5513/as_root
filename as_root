#!/usr/bin/perl 
use strict;
use warnings;
use utf8;
use Expect;
use File::Basename;
use Getopt::Long;
use POSIX qw(strftime);
use Data::Dumper;
use XML::LibXML;

my @directives=qw(log_file passwords_file default_password decrypt user);
my %directives;
$directives{$_}=1 foreach @directives;

sub get_login
{
	my $id=`id`;
	if ($id =~ /^uid=(\d+)\(([^\)]*)\)/)
	{
		return $2 if defined ($2);
		return $1 if defined ($1);
	}
	return "WRONG";
}
sub read_config
{
	my ($options)=@_;
	my %config=(log_file => "/var/log/as_root.log", 
		passwords_file => "/etc/as_root/passwords.xml",
		user => get_login,
		decrypt=>0
		);
	my $file_config=$options->{file_config};

	if (not defined $file_config)
	{
		if (-e "$ENV{HOME}/.as_root/config")
		{
			$file_config="$ENV{HOME}/.as_root/config";
		}
		elsif (-e "/etc/as_root/config")
		{
			$file_config="/etc/as_root/config";	
		}
	}

	# Let's not use any Config:: module ...
	if (-e "$file_config")
	{
		open my $f , "$file_config";
		while (<$f>)
		{
			next if (/^#/);
			if (/([^=]*)=(.*)\s*$/)
			{
				my $directive=$1;
				my $value=$2;

				if (not defined ($directives{$directive}))
				{
					die "$directive is not a valid directive";
				}
				$config{$directive}=$value;
			}
		}
	}
	# Command line options ..
	if (defined $options->{passwords_file})
	{
		$config{passwords_file}=$options->{passwords_file};
	}
	if (defined $options->{root})
	{
		$config{user}=$options->{root};
	}
	if (defined $options->{decrypt})
	{
		$config{decrypt}=$options->{decrypt};
	}
	return %config;
}


my $decrypt;
my $passwords_file;
my $log_file;
my $default_password="password";
my $command_script=0;


sub get_password
{
    my $password;
    my ($host,$config)=@_;
	my $dontdelete=0;

    my $pass_file_decrypt="/tmp/passwords-insecure-$config->{user}.xml";
	if ( not -e $pass_file_decrypt)
	{
		if ( not -e $config->{passwords_file} )
		{
			die "I can't open $config->{passwords_file}";
		}
		if ( not defined $config->{decrypt} )
		{
			my $desencriptado=system ("openssl des3 -salt -d ".
				"-in $config->{passwords_file} ".
				"-out $pass_file_decrypt ".
				"2> /dev/null");
			if ( $? ne 0)
			{
				unlink "$pass_file_decrypt";
				die "I can't decrypt the file $config->{passwords_file}.".
					"Dying...";
			}
		}
		else
		{
			$pass_file_decrypt=$config->{passwords_file};
		}
	}
	else
	{
		$dontdelete=1;
	}

	$config->{passwords_file}=$pass_file_decrypt;

	my $xml = XML::LibXML->load_xml(location => $config->{passwords_file});
	my $xc = XML::LibXML::XPathContext->new($xml);
	$password = $xc -> findvalue ("//Group/Entry/String".
		"[Key='UserName'][Value='root']".
		"/../String[Key='Title'][Value='$host']".
		"/../String[Key='Password']/Value");

	if (not defined ($password))
	{
		$password=$default_password;
	}
	if ( not defined $config->{decrypt} and $dontdelete ne 1 )
	{
		system ("rm -f $pass_file_decrypt");
		if ($? ne 0)
		{
			die "I can't delete file $pass_file_decrypt. Dying ...";
		}
	}
	return $password;
}

sub linux_or_solaris 
{
	my $host=shift;
	my $root=shift;
	my $res=0;
	my $linux=0;
	my $solaris=0;
	
	$res=system("ssh -l $root $host '
	if ! [ -d /usr/local/bin ]; 
	then 
		exit 4;
	fi
	if uname -a | grep -i linux &> /dev/null
	then
		mkdir as_root 2> /dev/null
		exit 2;
	fi
	if uname -a | grep -i SunOS &> /dev/null
	then
		mkdir as_root 2> /dev/null
		exit 3;
	fi
	'");
	# estos numeros los he tenido que mirar a mano ... no se como ira en el mismo linux

	$res=$res >> 8;	
	if ($res eq 4)
	{
		die "I logged into $host, but I can't find /usr/local/bin there!!";
	}
	if ($res eq 3)
	{
		return "solaris";
	}
	elsif ($res eq 2)
	{
		return "linux";
	}
	else
	{
		die "I didn't find OS from $host. Maybe I did not login. Dying ...";
	}
}

sub as_root
{
	my $host=shift;
	my $root=shift;
	my $password=shift;
	my $command=shift;
	my $log_file=shift;
	my $su;
	my $pass=0;
	my $so=linux_or_solaris($host,$root);
	my $cmd;

	my $fecha=strftime "%Y%m%d - %H:%M:%S", localtime;
	open LOG, ">>$log_file";
	print LOG "$fecha - as_root $host, $root, \"$command\" LAUNCHED\n";
	close LOG;
	if ( $command_script eq 1 )
	{
		my $script=basename($command);
		my $res=system("scp -q $command $root\@$host:as_root/$script");
		# $res ne 0 ...
		if ($res eq 256)
		{
			die "I cannot copy $command to $root\@$host:as_root/$script";
		}
		if ($so eq "solaris")
		{
			$cmd = <<"EOC";
su - root -c \\\"
mv /export/home/$root/as_root/$script /usr/local/bin/
chmod +x /usr/local/bin/$script 
/usr/local/bin/$script \\\"
EOC
		}
		elsif ($so eq "linux")
		{
			$cmd = <<"EOC";
su -c 'mv /home/$root/as_root/$script /usr/local/bin
chmod +x /usr/local/bin/$script
/usr/local/bin/$script
rm -f /usr/local/bin/$script' - root
EOC
		}
	}
	elsif ( $command =~ /./)
	{
		if ($so eq "linux")
		{
			$cmd = <<"EOC";
su -c ' 
$command
' - root
EOC
		}
		elsif ($so eq "solaris")
		{
			$cmd = <<"EOC";
su - root -c \\\"
$command
\\\"
EOC
		}
	}
	else
	{
		$cmd = <<"EOC";
su - root
EOC
	}
	$su=new Expect;
	if ( -t STDIN )
	{
		$su->slave->clone_winsize_from(\*STDIN);
	}
	$su->spawn ("ssh -q  -t $root\@$host \"$cmd\"") or 
		die "I cannot exec the command";
#	$SIG{WINCH} = \&winch;
  
#	sub winch {
#    	$su->slave->clone_winsize_from(\*STDIN);
#   	 kill WINCH => $su->pid if $su->pid;
#    	$SIG{WINCH} = \&winch;
#  	}


	$su->log_user(0);
	# $su->log_file ("/tmp/as_root");
	# $su->expect (undef);
	if ($so eq "linux")
	{
		# "ContraseÃ±a:" vs "Password: " ...
		$su->expect (10,
		[ qr/Passw.*/ => sub { my $exp=shift;
			$exp->send("$password"."\n");
			exp_continue;
			}]  ,
		[ qr/Contr.*/ => sub { my $exp=shift;
			$exp->send("$password"."\n");
			$exp->log_user(1);
			exp_continue;
			}],
		[ qr/^.$/ => sub { my $exp=shift; $exp->log_user(1); } ] 
		);
	}
	elsif ($so eq "solaris")
	{
		$su->expect (10,
		[ qr/Contr.*|Passw.*/ => sub { my $exp=shift;
			$exp->send("$password"."\n");
			$pass=1;
			exp_continue;
			}]  ,
		[ qr/^.$/ => sub { my $exp=shift; $exp->log_user(1) if ($pass == 1); } ] 
	#	[ qr/SunOS/ => sub { my $exp=shift; $exp->log_user(1); } ] 
		);
	}
	if ($command =~ /^$/)
	{
		$su->interact();
	}
	$su->soft_close();
	$fecha=strftime "%Y%d%m - %H:%M:%S", localtime;
	open LOG, ">>$log_file";
	print LOG "$fecha - as_root $host, $root, \"$command\" FINISHED\n";
	close LOG;
}


Getopt::Long::Configure ("bundling");

my $file_config;
my $file_script;
my $root;
my $result = GetOptions (
		"config|c" => \$file_config,
        "file|f=s" => \$file_script,
        "passwordfile|p=s" => \$passwords_file,
	"user|u=s" => \$root,
	"decrypted|d" => \$decrypt
        );
my $command;

my %config=read_config ( { file_config=>$file_config,
			passwords_file => $passwords_file,
			user => $root,
			decrypt => $decrypt});

if ( $#ARGV lt 0 )
{
	die "I need a host as argument";
}

my $host= $ARGV[0];
my $password=get_password($host,\%config);

# Para los sistemas que necesitan saltos, usamos ssh
# There are system which need hops (configured with ProxyCommands), so nc is
# not a option here
# my $nc=system ("nc -z -w 2 $host 22 &> /dev/null");
my $nc=system ("ssh -l $config{user} $host true &> /dev/null");
if ($nc ne 0)
{
	die "I cannot login into \"$host\"\n";
}

if (defined $file_script)
{
	$command=$file_script;
	$command_script=1;
}
elsif (defined $ARGV[1])
{
	$command="$ARGV[1]";
}
else
{
	$command="";
}

as_root ($host, $config{user}, $password, 
		$command,$config{log_file});
