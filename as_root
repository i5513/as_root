#!/usr/bin/perl 
use strict;
use warnings;
use utf8;
use Expect;
use File::Basename;
use Getopt::Long;
use Pod::Usage;
use POSIX qw(strftime);
use Data::Dumper;
use XML::LibXML;

my @directives=qw(log_file passwords_file default_password 
	decrypted user domains);
my %directives;
$directives{$_}=1 foreach @directives;
my %config;

sub info
{
	return if $config{log_file} !~ /./;
	my $msg=shift;
	my $date=strftime "%Y%m%d - %H:%M:%S", localtime;
	open LOG, ">>","$config{log_file}";
	print LOG "$date - $msg";
	close LOG;
}

sub get_login
{
	my $id=`id`;
	if ($id =~ /^uid=(\d+)\(([^\)]*)\)/)
	{
		return $2 if defined ($2);
		return $1 if defined ($1);
	}
	return "WRONG";
}
sub read_config
{
	my ($options)=@_;
	my %config=(log_file => "/var/log/as_root.log", 
		passwords_file => "/etc/as_root/passwords.xml",
		user => get_login,
		decrypted=>0
		);
	my $file_config=$options->{file_config};

	if (not defined $file_config)
	{
		if (-e "$ENV{HOME}/.as_root/config")
		{
			$file_config="$ENV{HOME}/.as_root/config";
		}
		elsif (-e "/etc/as_root/config")
		{
			$file_config="/etc/as_root/config";	
		}
	}

	# Let's not use any Config:: module ...
	if (-e "$file_config")
	{
		open my $f , "$file_config";
		while (<$f>)
		{
			next if (/^#/);
			if (/([^=]*)\s*=\s*(.*)\s*$/)
			{
				my $directive=$1;
				my $value=$2;

				if (not defined ($directives{$directive}))
				{
					die "$directive is not a valid directive";
				}
				$config{$directive}=$value;
			}
		}
	}
	# Command line options ..
	foreach my $opt (grep { defined $options->{$_} }keys %$options)
	{
		$config{$opt}=$options->{$opt};
	}
	if (defined $config{log_file} and $config{log_file} =~ /./)
	{
		open my $log, ">", "$config{log_file}" or 
		die "Can't open $config{log_file}";
	}
	return %config;
}

sub get_password
{
    my $password;
    my ($host,$config)=@_;
	my $dontdelete=0;

    my $pass_file_decrypt="/tmp/passwords.insecure.$config->{user}.xml";
	if ( not -e $pass_file_decrypt)
	{
		if ( not -e $config->{passwords_file} )
		{
			die "I can't open $config->{passwords_file}";
		}
		if ( not defined $config->{decrypted} or $config->{decrypted} eq 0)
		{
			my $desencriptado=system ("openssl des3 -salt -d ".
				"-in $config->{passwords_file} ".
				"-out $pass_file_decrypt ".
				"2> /dev/null");
			if ( $? ne 0)
			{
				unlink "$pass_file_decrypt";
				die "I can't decrypt the file $config->{passwords_file}.".
					"Dying...";
			}
		}
		else
		{
			$pass_file_decrypt=$config->{passwords_file};
		}
	}
	else
	{
		$dontdelete=1;
	}

	$config->{passwords_file}=$pass_file_decrypt;

	my $xml = XML::LibXML->load_xml(location => $config->{passwords_file});
	my $xc = XML::LibXML::XPathContext->new($xml);
	# keepass xml v2
	$password = $xc -> findvalue ("//Group/Entry/String".
		"[Key='UserName'][Value='root']".
		"/../String[Key='Title'][Value='$host']".
		"/../String[Key='Password']/Value");

	if (not defined ($password) or $password !~ /./)
	{
		# keepass xml v1
		$password = $xc -> findvalue ("/database/group/".
			"entry[title='$host'][username='root']/password");
		if (not defined ($password))
		{
			$password=$config->{default_password};
		}
	}
	if ( (not defined $config->{decrypted} or $config->{decrypted} eq 0) and $dontdelete ne 1 )
	{
		system ("rm -f $pass_file_decrypt");
		if ($? ne 0)
		{
			die "I can't delete file $pass_file_decrypt. Dying ...";
		}
	}
	return $password;
}

sub linux_or_solaris 
{
	my $host=shift;
	my $root=shift;
	my $res=0;
	my $linux=0;
	my $solaris=0;
	
	$res=system("ssh -l $root $host '
	if ! [ -d /usr/local/bin ]; 
	then 
		exit 4;
	fi
	if uname -a | grep -i linux &> /dev/null
	then
		mkdir as_root 2> /dev/null
		exit 2;
	fi
	if uname -a | grep -i SunOS &> /dev/null
	then
		mkdir as_root 2> /dev/null
		exit 3;
	fi
	'");
	# estos numeros los he tenido que mirar a mano ... no se como ira en el mismo linux

	$res=$res >> 8;	
	if ($res eq 4)
	{
		die "I logged into $host, but I can't find /usr/local/bin there!!";
	}
	if ($res eq 3)
	{
		return "solaris";
	}
	elsif ($res eq 2)
	{
		return "linux";
	}
	elsif ($res eq 255)
	{
		die "I can not login to $host as $root"
	}
	else
	{
		die "I didn't find OS from $host. Maybe I did not login. Dying ...";
	}
}

sub as_root
{
	my $host=shift;
	my $command=shift;
	my $config=shift;
	my $password=get_password ($host,$config);
	my $pass=0;
	my $root = $config->{user};
	my $so=linux_or_solaris($host,$root);
	my $cmd;
	

	info ("as_root $host, $root, \"$command\" LAUNCHED\n");

	if ( defined $config->{file_script} )
	{
		my $command=$config->{file_script};
		my $script=basename($command);
		my $res=system("scp -q $command $root\@$host:as_root/$script");
		# $res ne 0 ...
		if ($res eq 256)
		{
			die "I cannot copy $command to $root\@$host:as_root/$script";
		}
		if ($so eq "solaris")
		{
			$cmd = <<"EOC";
su - root -c \\\"
mv \$HOME/as_root/$script /usr/local/bin/
chmod +x /usr/local/bin/$script 
/usr/local/bin/$script 
rm -f /usr/local/bin/$script\\\"
EOC
		}
		elsif ($so eq "linux")
		{
			$cmd = <<"EOC";
su -c '
mv \$HOME/as_root/$script /usr/local/bin
chmod +x /usr/local/bin/$script
/usr/local/bin/$script
rm -f /usr/local/bin/$script' - root
EOC
		}
	}
	elsif ( $command =~ /./)
	{
		if ($so eq "linux")
		{
			$cmd = <<"EOC";
su -c ' 
$command
' - root
EOC
		}
		elsif ($so eq "solaris")
		{
			$cmd = <<"EOC";
su - root -c \\\"
$command
\\\"
EOC
		}
	}
	else
	{
		$cmd = <<"EOC";
su - root
EOC
	}
	my $su;
	$su=new Expect;
	if ( -t STDIN )
	{
		$su->slave->clone_winsize_from(\*STDIN);
	}
	$su->spawn ("ssh -q  -t $root\@$host \"$cmd\"") or 
		die "I cannot exec the command";
#	$SIG{WINCH} = \&winch;
  
#	sub winch {
#    	$su->slave->clone_winsize_from(\*STDIN);
#   	 kill WINCH => $su->pid if $su->pid;
#    	$SIG{WINCH} = \&winch;
#  	}


	$su->log_user(0);
	# $su->log_file ("/tmp/as_root");
	# $su->expect (undef);
	if ($so eq "linux")
	{
		# "ContraseÃ±a:" vs "Password: " ...
		$su->expect (10,
		[ qr/Contr.*|Passw.*/ => sub {
			my $exp=shift;
			$exp->send("$password\n");
			exp_continue;
			}],
		[ qr/^.$/ => sub { my $exp=shift; $exp->log_user(1); } ] 
		);
	}
	elsif ($so eq "solaris")
	{
		$su->expect (10,
		[ qr/Contr.*|Passw.*/ => sub {
			my $exp=shift;
			$exp->send("$password"."\n");
			$pass=1;
			exp_continue;
			}]  ,
		[ qr/^.$/ => sub { my $exp=shift; $exp->log_user(1) if ($pass == 1); } ] 
	#	[ qr/SunOS/ => sub { my $exp=shift; $exp->log_user(1); } ] 
		);
	}
	if ($command =~ /^$/)
	{
		$su->interact();
	}
	$su->soft_close();
	info ("as_root $host, $root, \"$command\" FINISHED\n");
}


Getopt::Long::Configure ("bundling");

my ($file_config,$file_script,$root,$decrypted,$passwords_file,$log_file);
my $help=0;
my $default_password="password";

my $result = GetOptions (
		"help|h" => \$help,
		"config|c" => \$file_config,
        "file_script|f=s" => \$file_script,
        "passwords_file|p=s" => \$passwords_file,
		"default_password|P=s" => \$default_password,
		"user|u=s" => \$root,
		"decrypted|d" => \$decrypted
        );
pod2usage({ -verbose => 99, -sections => [qw (SYPNOSIS OPTIONS)]}) if $help;

%config=read_config ( { 
			file_config=>$file_config,
			passwords_file => $passwords_file,
			file_script => $file_script,
			default_password => $default_password,
			user => $root,
			decrypted => $decrypted
			});

if ( $#ARGV lt 0 )
{
	pod2usage({ -verbose => 99, -sections => [qw (SYPNOSIS OPTIONS)]});
}

my $host= $ARGV[0];

# There are system which need hops (configured with ProxyCommands), so nc is
# not a option here
# my $nc=system ("nc -z -w 2 $host 22 &> /dev/null");
#my $nc=system ("ssh -l $config{user} $host true &> /dev/null");
#if ($nc ne 0)
#{
#	die "I cannot login into \"$host\"\n";
#}

my $command;
if (defined $ARGV[1])
{
	$command="$ARGV[1]";
}
else
{
	$command="";
}

as_root ($host, $command,\%config);

__END__

=head1 NAME

as_root - Execute remote commands with root user

=head1 SYPNOSIS

B<as_root> [OPTION] host [command]

=head1 DESCRIPTION

as_root is a perl script which do basically:

$ ssh host ' su - ' 

or

$ ssh host ' su - command' 
#

It assumes:

	- You use key public infraestructure to login your host, probabbly
using ssh-agent for keep your passphrase.

	- You have a file with your root passwords

	- You know sudo is the solution ... but your partners/boss not ... and you are
	  not allowed to install sudo in all your hosts

=head1 OPTIONS

=head2 B<--config|-c file>

Use file as file config. By default it searched at ~/.as_root/config and
/etc/as_root/config in that order.

=head2 B<--passwords_file|-p file>

Use file as password file. For the moment only xml keepass v2 format is
supported

=head2 B<--default_password|-P mypassword>
Use mypassword as default password

=head2 B<--file_script|-f script> 

Copy script in remote host and exec it

=head2 B<--user|-u remote_user >

Your remote user login name

=head2 B<--decrypted|-d>

If your password file is not encrypted, use this option

=head1 CONFIGURATION FILE

Use '#' to comment, and simple "directive=value". Directives supported are
(defaults between '['):

log_file [/var/log/as_root.log], use log_file= for not having logs

passwords_file [/etc/as_root/passwords.xml]

default_password [password]

decrypted [0]

user [local username]

Meaning are obvious

=head1 LICENSE

WTFPL

=head1 AUTHOR

Javier Barroso <javibarroso@gmail.com>
